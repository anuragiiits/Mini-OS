package osproject;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/**
 *
 * @author anurag
 */
public class Notepad extends javax.swing.JInternalFrame {
        String filename="";
        String[] stack=new String[3];
        int cnt;
        int count;
    /**
     * Creates new form Notepad
     */
    public Notepad(int n) {
        cnt=0;
        count=n;
        initComponents();
         {
        addInternalFrameListener(new InternalFrameAdapter(){
            public void internalFrameClosed(InternalFrameEvent e) {
                
            }
        });
    } 
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filechooser = new javax.swing.JFileChooser();
        tab = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newfile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        savefile = new javax.swing.JMenuItem();
        openfile = new javax.swing.JMenuItem();
        saveas = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        selectall = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Notepad");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameDeiconified(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        ta.setColumns(20);
        ta.setRows(5);
        ta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(ta);

        tab.addTab("tab1", jScrollPane1);

        jMenu1.setText("File");

        newfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newfile.setText("New File");
        newfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newfileActionPerformed(evt);
            }
        });
        jMenu1.add(newfile);

        jSeparator1.setBackground(new java.awt.Color(219, 215, 210));
        jMenu1.add(jSeparator1);

        savefile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        savefile.setText("Save File ");
        savefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savefileActionPerformed(evt);
            }
        });
        jMenu1.add(savefile);

        openfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openfile.setText("Open File ");
        openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfileActionPerformed(evt);
            }
        });
        jMenu1.add(openfile);

        saveas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveas.setText("Save As...");
        saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasActionPerformed(evt);
            }
        });
        jMenu1.add(saveas);
        jMenu1.add(jSeparator2);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo.setText("Undo  ");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        jMenu2.add(undo);
        jMenu2.add(jSeparator3);

        selectall.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectall.setText("Select All");
        jMenu2.add(selectall);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste ");
        jMenu2.add(paste);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem9.setText("Version");
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("About Us");
        jMenu3.add(jMenuItem10);

        jMenuItem11.setText("Contact Us");
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tab, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 259, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tab, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newfileActionPerformed
        if(ta.getText().isEmpty()== false){
            JDialog.setDefaultLookAndFeelDecorated(true);
            int response = JOptionPane.showConfirmDialog(null, "Do you want to save changes ?","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if(response == JOptionPane.NO_OPTION){
                ta.setText("");
            }
            else if(response == JOptionPane.YES_OPTION){
                savefileActionPerformed(evt);
                filename="";
                ta.setText("");
            }
            else if(response == JOptionPane.CANCEL_OPTION){

            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_newfileActionPerformed

    private void savefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savefileActionPerformed

        if(ta.getText().isEmpty()== false){
            System.out.println(filename);
            JDialog.setDefaultLookAndFeelDecorated(true);

            if(filename!="")
            {
                tab.setTitleAt(0, filename.substring(filename.lastIndexOf('/')+1));
                try
                {
                    PrintWriter writer=new PrintWriter(filename,"UTF-8");
                    writer.print(ta.getText());
                    writer.close();
                }
                catch (Exception e) {
                }

            }
            else{
                //String response = JOptionPane.showInputDialog(null, "Enter a file name.");

                try
                {
                    filechooser.setDialogTitle("Save file");
                    int returnVal = filechooser.showSaveDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = filechooser.getSelectedFile();
                        try {

                            filename=file.getAbsolutePath();
                            tab.setTitleAt(0, file.getName());
                            PrintWriter writer=new PrintWriter(filename,"UTF-8");
                            writer.print(ta.getText());
                            writer.close();

                        } catch (IOException ex) {
                            System.out.println("problem accessing file"+file.getAbsolutePath());
                        }
                    }

                }
                catch (Exception e) {
                }
            }

        }

    }//GEN-LAST:event_savefileActionPerformed

    private void openfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfileActionPerformed

        // TODO add your handling code here:

        filechooser.setDialogTitle("Open a file");
        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            try {
                ta.read( new FileReader( file.getAbsolutePath() ), null );
                filename=file.getAbsolutePath();
                tab.setTitleAt(0, file.getName());;
            } catch (IOException ex) {
                System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        }

    }//GEN-LAST:event_openfileActionPerformed

    /**
     *
     * @param e
     */
    public void JInternalFrameClosed(InternalFrameEvent e){
        System.out.println("closed");
        
    }
    private void saveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasActionPerformed
        // TODO add your handling code here:
        if(ta.getText().isEmpty()== false){
            System.out.println(filename);
            JDialog.setDefaultLookAndFeelDecorated(true);
            try
            {
                filechooser.setDialogTitle("Save As");
                int returnVal = filechooser.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = filechooser.getSelectedFile();
                    try {

                        filename=file.getAbsolutePath();
                        PrintWriter writer=new PrintWriter(filename,"UTF-8");
                        writer.print(ta.getText());
                        writer.close();

                    } catch (IOException ex) {
                        System.out.println("problem accessing file"+file.getAbsolutePath());
                    }
                }

            }
            catch (Exception e) {
            }
        }

    }//GEN-LAST:event_saveasActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed

        if(ta.getText().isEmpty()== false){
            JDialog.setDefaultLookAndFeelDecorated(true);
            int response = JOptionPane.showConfirmDialog(null, "Do you want to save changes ?","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if(response == JOptionPane.NO_OPTION){

               // System.exit(0);
            }
            else if(response == JOptionPane.YES_OPTION){
                savefileActionPerformed(evt);
                //ta.setText("");
                //System.exit(0);
            }
            else if(response == JOptionPane.CANCEL_OPTION){

            }
        }
        //else
        //System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_exitActionPerformed
    public void appendtota(String s) throws IOException{
            try {
                System.out.println("Notepad");
                ta.read(new FileReader(s),null);
                tab.setTitleAt(0,s.substring(s.lastIndexOf('/')+1));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        
        cnt--;
        ta.setText(stack[cnt]);
        
    }//GEN-LAST:event_undoActionPerformed

    private void taKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taKeyPressed
        // TODO add your handling code here:
        if(cnt==3)
            cnt=0;
        stack[cnt]=ta.getText();
        cnt++;
        
    }//GEN-LAST:event_taKeyPressed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        Home.processList.removeItem("Notepad");
        Home.np[count]=null;
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeiconified
        for(int j=0;j<10;j++){
                System.out.println(j+" value of i");
                if(Home.cal[j]!=null){
                    
                    try {
                        Home.cal[j].setIcon(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
                if(Home.np[j]!=null&&j!=count){
                    try {
                            Home.np[j].setIcon(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(Home.sc[j]!=null){
                    try {
                            Home.sc[j].setIcon(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(Home.ter[j]!=null){
                    try {
                            Home.ter[j].setIcon(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        
    }//GEN-LAST:event_formInternalFrameDeiconified


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exit;
    private javax.swing.JFileChooser filechooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem newfile;
    private javax.swing.JMenuItem openfile;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem saveas;
    private javax.swing.JMenuItem savefile;
    private javax.swing.JMenuItem selectall;
    private javax.swing.JTextArea ta;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JMenuItem undo;
    // End of variables declaration//GEN-END:variables
}
